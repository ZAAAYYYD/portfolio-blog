// Service de d√©monstration pour les formulaires (fonctionne imm√©diatement)
// En production, utilisez Web3Forms ou EmailJS avec les vraies cl√©s

interface ContactFormData {
  name: string
  email: string
  subject: string
  message: string
}

interface NewsletterData {
  email: string
}

// Simulation d'envoi d'email pour la d√©mo
const simulateEmailSend = (delay: number = 1500): Promise<boolean> => {
  return new Promise((resolve) => {
    setTimeout(() => {
      // Simule un succ√®s dans 90% des cas
      resolve(Math.random() > 0.1)
    }, delay)
  })
}

export const sendContactForm = async (formData: ContactFormData): Promise<{ success: boolean; message: string }> => {
  try {
    console.log('üìß D√âMO - Message re√ßu:', {
      nom: formData.name,
      email: formData.email,
      sujet: formData.subject,
      message: formData.message.substring(0, 50) + '...',
      timestamp: new Date().toLocaleString('fr-FR')
    })

    // Simulation d'envoi
    const success = await simulateEmailSend()

    if (success) {
      // En production, ceci enverrait un vrai email √† zayd.elajli@gmail.com
      console.log('‚úÖ Email envoy√© avec succ√®s (simulation)')
      return {
        success: true,
        message: '‚úÖ Message envoy√© avec succ√®s ! Je vous r√©pondrai rapidement. (Mode d√©mo - configurez Web3Forms pour les vrais emails)'
      }
    } else {
      return {
        success: false,
        message: '‚ùå Erreur simulation. En production, configurez Web3Forms dans EMAIL_SETUP_GUIDE.md'
      }
    }
  } catch (error) {
    console.error('Erreur formulaire d√©mo:', error)
    return {
      success: false,
      message: '‚ùå Erreur r√©seau. Consultez EMAIL_SETUP_GUIDE.md pour la configuration compl√®te.'
    }
  }
}

export const subscribeNewsletter = async (emailData: NewsletterData): Promise<{ success: boolean; message: string }> => {
  try {
    console.log('üì¨ D√âMO - Nouvel abonn√© newsletter:', {
      email: emailData.email,
      timestamp: new Date().toLocaleString('fr-FR')
    })

    // Simulation d'abonnement
    const success = await simulateEmailSend(1000)

    if (success) {
      console.log('‚úÖ Newsletter abonnement r√©ussi (simulation)')
      console.log('üìß Email de bienvenue envoy√© √†:', emailData.email)
      console.log(`
üì¨ EMAIL DE BIENVENUE (simulation) :
=====================================
√Ä: ${emailData.email}
Sujet: ‚úÖ Bienvenue dans ma newsletter ! üöÄ

Merci de vous √™tre abonn√©(e) ! 
Vous recevrez mes articles sur l'IA, le d√©veloppement et la tech.

Zayd El Ajli
      `)
      
      return {
        success: true,
        message: '‚úÖ Abonnement r√©ussi ! Un email de bienvenue vous a √©t√© envoy√©. (Mode d√©mo - configurez Web3Forms pour les vrais emails)'
      }
    } else {
      return {
        success: false,
        message: '‚ùå Erreur simulation abonnement. Configurez Web3Forms pour un syst√®me r√©el.'
      }
    }
  } catch (error) {
    console.error('Erreur newsletter d√©mo:', error)
    return {
      success: false,
      message: '‚ùå Erreur abonnement. Consultez EMAIL_SETUP_GUIDE.md pour la configuration.'
    }
  }
}

// Pour le mode production avec vraies cl√©s
export const isProductionReady = () => {
  return process.env.WEB3FORMS_ACCESS_KEY && process.env.WEB3FORMS_ACCESS_KEY !== 'demo-key-replace-with-yours'
}

// Instructions affich√©es en console
console.log(`
üéØ PORTFOLIO EMAIL SYSTEM - MODE D√âMO
=====================================

üìß Les formulaires fonctionnent en mode d√©mo !
‚úÖ Contact: http://localhost:3000/contact  
‚úÖ Newsletter: http://localhost:3000/blog

üìã Pour les VRAIS emails (production):
1. Ouvrez: EMAIL_SETUP_GUIDE.md
2. Cr√©ez un compte Web3Forms (gratuit)
3. Remplacez la cl√© dans contact.ts
4. Les emails arriveront sur zayd.elajli@gmail.com

‚ö° Configuration compl√®te en 5 minutes !
`)

export { sendContactForm as demoContactForm, subscribeNewsletter as demoNewsletterSubscribe }
